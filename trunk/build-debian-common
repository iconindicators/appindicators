#!/bin/bash
#
# Common code for the build-debian script for all indicators.
#
# Will need to install the packages:
#   devscripts build-essential lintian

# Python Utils contains Python/build scripts common to all indicators.
PYTHON_UTILS=../PythonUtils


# Supported themes and corresponding colours.
themeNames=(   "Adwaita" "elementary-xfce-darker" "Lubuntu" "ubuntu-mono-dark" "ubuntu-mono-light" )
themeColours=(  bebebe             f3f3f3          4c4c4c          dfdbd2             3c3c3c       )


# Arguments: 
#   Array of source files present in the src directory.
#   Array of hicolor icon names present in the icons directory.
#   Array of hicolor colours present across ALL hicolor icons.
doStandardBuild()
{
  copyTopLevelAndSource $1
  copyHicolorCreateThemed $2 $3
  copyPOCreateMO
  echo build/$NAME-$VERSION/po/$NAME.pot
  echo build/$NAME-$VERSION/po/$NAME.mo
  msgfmt build/$NAME-$VERSION/po/$NAME.pot --output-file build/$NAME-$VERSION/po/$NAME.mo
  createOrigTarGz
  copyDebian
  addIconsToDebianInstall $2
  addMOToDebianInstall
  buildDeb
  cleanUp
}


# Arguments:
#   Array of source files present in the src directory.
copyTopLevelAndSource()
{
  local -n _source=$1

  rm -rf build
  mkdir -p build/$NAME-$VERSION

  cp $NAME.py.desktop build/$NAME-$VERSION

  mkdir -p build/$NAME-$VERSION/src
  cp packaging/debian/changelog build/$NAME-$VERSION/src
  cp $PYTHON_UTILS/src/pythonutils.py build/$NAME-$VERSION/src

  for item in "${_source[@]}"; do
    cp src/"$item" build/$NAME-$VERSION/src
  done
}


# Arguments:
#   Array of hicolor icons names present in the icons directory.
#   Array of hicolor colours present across ALL hicolor icons.
copyHicolorCreateThemed()
{
  local -n _hicolorIcons=$1
  local -n _hicolorColours=$2

  # Copy hicolor icon(s)...
  mkdir -p build/$NAME-$VERSION/icons/hicolor
  for (( i = 0; i < "${#_hicolorIcons[*]}"; i++ )); do
    sourceIcon=icons/"${_hicolorIcons[ $i ]}"
    cp $sourceIcon build/$NAME-$VERSION/icons/hicolor

    # ...and create themed icons...
    for (( j = 0; j < ${#themeNames[@]}; j++ )); do
     destPath=build/$NAME-$VERSION/icons/${themeNames[ $j ]}
     mkdir -p $destPath
     cp $sourceIcon $destPath

      # ...by substituting each hicolor colour(s) for the current theme colour.
      for (( k = 0; k < "${#_hicolorColours[*]}"; k++ )); do
        sed -i s/"${_hicolorColours[ $k ]}"/${themeColours[ $j ]}/g $destPath/"${_hicolorIcons[ $i ]}"
      done
    done
  done
}


copyPOCreateMO()
{
  # Copy entire po directory.
  rsync -ar --exclude=.svn po build/$NAME-$VERSION

  # Append translations from pythonutils to POT.
  msgcat --use-first build/$NAME-$VERSION/po/$NAME.pot $PYTHON_UTILS/po/pythonutils.pot --output-file=build/$NAME-$VERSION/po/$NAME.pot

  # Append translations from pythonutils to PO files.
  for PO_FILE in $(find build/$NAME-$VERSION/po -type f -name '*.po') ; do

    # Get the language code.  Split the PO_FILE into an array using / as the delimiter.
    array=(`echo $PO_FILE | sed 's/\//\n/g'`)
    languageCode=${array[${#array[@]}-2]}

    msgcat --use-first $PO_FILE $PYTHON_UTILS/po/$languageCode/pythonutils.po --output-file=$PO_FILE
  done

  # Create .mo files.
  for PO_FILE in $(find build/$NAME-$VERSION/po -type f -name '*.po') ; do
    msgfmt $PO_FILE --output-file ${PO_FILE%\.po}.mo
  done
}


createOrigTarGz()
{
  cd build
  tar -czf "${NAME}_${VERSION}.orig.tar.gz" $NAME-$VERSION
  cd ..
}


copyDebian()
{
  rsync -ar --exclude=.svn packaging/debian build/$NAME-$VERSION
}


# Arguments:
#   Array of hicolor icons names present in the icons directory.
addIconsToDebianInstall()
{
  # Update debian/install with icons.
  local -n _hicolorIcons=$1

  for (( i = 0; i < "${#_hicolorIcons[*]}"; i++ )); do
    for (( j = 0; j < ${#themeNames[@]}; j++ )); do
      line="icons/${themeNames[ $j ]}/${_hicolorIcons[ $i ]} usr/share/icons/${themeNames[ $j ]}/scalable/apps"
      echo $line >> build/$NAME-$VERSION/debian/install
    done
  done
}


addMOToDebianInstall()
{
  # Update debian/install file with .mo
  echo ""
  cd build/$NAME-$VERSION
  for MO_FILE in $(find po -type f -name '*.mo') ; do
    FIRST_SLASH=`expr index "$MO_FILE" /`
	STRING_AFTER_FIRST_SLASH=${MO_FILE:FIRST_SLASH}
    SECOND_SLASH=`expr index "$STRING_AFTER_FIRST_SLASH" /`
    MO_CODE=${STRING_AFTER_FIRST_SLASH:0:SECOND_SLASH-1}
    echo "$MO_FILE /usr/share/locale/${MO_CODE}/LC_MESSAGES" >> debian/install
  done
  cd ../..
}


buildDeb()
{
  # Build DEB source (or binary).
  cd build/$NAME-$VERSION
#  debuild -S -sa         # Builds a DEB source file.
  debuild -sa -us -uc   # Builds a DEB binary file.
  cd ..
}


cleanUp()
{
  rm -rf $NAME-$VERSION
  echo -e "\nTo upload to LaunchPad, change to the 'build' directory and run:\n"
  echo -e "    dput ppa:thebernmeister/ppa ${NAME}_${VERSION}-1_source.changes\n"
}


# References for building a Debian package for PPA...
# http://askubuntu.com/questions/27715/create-a-deb-package-from-scripts-or-binaries
# http://askubuntu.com/questions/28562/how-do-i-create-a-ppa-for-a-working-program
# http://askubuntu.com/questions/90764/how-do-i-create-a-deb-package-for-a-single-python-script
# http://blog.garethj.com/2009/06/02/building-deb-packages-for-python-applications
# http://developer.ubuntu.com/packaging/html/debian-dir-overview.html
# http://help.launchpad.net/Packaging/PPA/Uploading
# http://help.ubuntu.com/community/PythonRecipes/DebianPackage
# http://savetheions.com/2010/01/20/packaging-python-applicationsmodules-for-debian
# http://shallowsky.com/blog/programming/packaging-launchpad-ppas.html
# http://ubuntulinuxtipstricks.blogspot.com.au/2010/08/is-packaging-new-software-hard.html
# http://wiki.debian.org/Python/Packaging
# http://wiki.ubuntu.com/MOTU/School/PackagingWithoutCompiling
# http://wiki.ubuntu.com/PackagingGuide/HandsOn
# http://wiki.ubuntu.com/PackagingGuide/Python
# http://www.debian.org/doc/manuals/maint-guide
# http://www.debian.org/doc/packaging-manuals/python-policy
# http://www.debian-administration.org/articles/336
# http://news.softpedia.com/news/How-to-Repack-Deb-Files-on-Debian-and-Ubuntu-404930.shtml
# http://blog.packagecloud.io/debian/debuild/packaging/2015/06/08/buildling-deb-packages-with-debuild