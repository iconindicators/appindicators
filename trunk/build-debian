#!/bin/bash
#
# Build the DEBIAN source files for upload to LaunchPad PPA.
# Ensure the version number below matches that in src/indicator-stardate.py and packaging/debian/changelog.  


NAME="indicator-stardate"
VERSION="1.0.28"
PYTHON_UTILS=../PythonUtils/src/pythonutils.py


# Initialisation.
rm -rf build

if [ ! -f $PYTHON_UTILS ];
then
    echo "$PYTHON_UTILS not found - ABORTING!" && exit 0
fi


# Copy top level files.
mkdir -p build/$NAME-$VERSION
cp $NAME.desktop build/$NAME-$VERSION
cp build-debian build/$NAME-$VERSION


# Python source.
mkdir -p build/$NAME-$VERSION/src
cp src/example.py src/indicator-stardate.py src/stardate.py $PYTHON_UTILS build/$NAME-$VERSION/src


# Icons.
rsync -ar --exclude=.svn --include=*.svg icons build/$NAME-$VERSION


# Translations.
rsync -ar --exclude=.svn --include=*.po po build/$NAME-$VERSION
cp po/LINGUAS po/POTFILES.in po/README build/$NAME-$VERSION/po


# Create .mo
for PO_FILE in $(find build/$NAME-$VERSION/po -type f -name '*.po') ; do
  msgfmt $PO_FILE --output-file ${PO_FILE%\.po}.mo
done


# Create orig.tar.gz
cd build
tar -czf "${NAME}_${VERSION}.orig.tar.gz" $NAME-$VERSION
cd ..


# Debian files.
rsync -ar --exclude=.svn packaging/debian build/$NAME-$VERSION


# Update debian/install file with .mo
cd build/$NAME-$VERSION
for MO_FILE in $(find po -type f -name '*.mo') ; do
  MO_PATH=${MO_FILE#po}
  MO_CODE=${MO_PATH%$NAME.mo}
  echo "$MO_FILE /usr/share/locale${MO_CODE}LC_MESSAGES" >> debian/install
done
cd ../..


# Build DEB source.
cd build/$NAME-$VERSION
debuild -S -sa         # Builds a DEB source file.
#debuild -sa -us -uc   # Builds a DEB binary file.
cd ..


# Clean up.
rm -rf $NAME-$VERSION
echo "To upload to LaunchPad, change to the 'build' directory and run:"
echo "    dput ppa:thebernmeister/ppa ${NAME}_${VERSION}-1_source.changes"


# References for building a Debian package for PPA...
# http://askubuntu.com/questions/27715/create-a-deb-package-from-scripts-or-binaries
# http://askubuntu.com/questions/28562/how-do-i-create-a-ppa-for-a-working-program
# http://askubuntu.com/questions/90764/how-do-i-create-a-deb-package-for-a-single-python-script
# http://blog.garethj.com/2009/06/02/building-deb-packages-for-python-applications
# http://developer.ubuntu.com/packaging/html/debian-dir-overview.html
# http://help.launchpad.net/Packaging/PPA/Uploading
# http://help.ubuntu.com/community/PythonRecipes/DebianPackage
# http://savetheions.com/2010/01/20/packaging-python-applicationsmodules-for-debian
# http://shallowsky.com/blog/programming/packaging-launchpad-ppas.html
# http://ubuntulinuxtipstricks.blogspot.com.au/2010/08/is-packaging-new-software-hard.html
# http://wiki.debian.org/Python/Packaging
# http://wiki.ubuntu.com/MOTU/School/PackagingWithoutCompiling
# http://wiki.ubuntu.com/PackagingGuide/HandsOn
# http://wiki.ubuntu.com/PackagingGuide/Python
# http://www.debian.org/doc/manuals/maint-guide
# http://www.debian.org/doc/packaging-manuals/python-policy
# http://www.debian-administration.org/articles/336
# http://news.softpedia.com/news/How-to-Repack-Deb-Files-on-Debian-and-Ubuntu-404930.shtml