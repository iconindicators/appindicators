#!/bin/bash
#
# Build the DEBIAN source files for upload to LaunchPad PPA.
#
# Ensure the version number below also matches:
#	src/indicator-tide.py
#	packaging/debian/changelog.  


VERSION="1.0.4"
NAME="indicator-tide"
PYTHON_UTILS=../PythonUtils/src/pythonutils.py


# Supported themes and corresponding colours.
themeNames=(   "elementary" "lubuntu" "ubuntu-mono-dark" "ubuntu-mono-light" )
themeColours=(    f4f4f4     5a5a5a          dfdbd2             3c3c3c       )


# List of hicolor icons belonging to the indicator (contents of the icons directory).
hicolorIcons=( $NAME".svg" )


# List of colours present across ALL the hicolor icons.
hicolorColours=( 0000aa )


# Initialisation and sanity check.
rm -rf build
if [ ! -f $PYTHON_UTILS ]
then
    echo "$PYTHON_UTILS not found - ABORTING!" && exit 0
fi


# Top level files.
mkdir -p build/$NAME-$VERSION
cp $NAME.desktop build/$NAME-$VERSION
cp build-debian build/$NAME-$VERSION


# Python source and changelog.
mkdir -p build/$NAME-$VERSION/src
cp src/indicator-tide.py src/locationData.py src/locations.py src/tide.py $PYTHON_UTILS build/$NAME-$VERSION/src
cp packaging/debian/changelog build/$NAME-$VERSION/src


# Copy hicolor icon(s)...
mkdir -p build/$NAME-$VERSION/icons/hicolor
for ((i = 0; i < ${#hicolorIcons[@]}; i++)); do
  sourceIcon=icons/${hicolorIcons[$i]}
  cp $sourceIcon build/$NAME-$VERSION/icons/hicolor

  # ...and create themed icons...
  for ((j = 0; j < ${#themeNames[@]}; j++)); do
   destPath=build/$NAME-$VERSION/icons/${themeNames[$j]}
   mkdir -p $destPath
   cp $sourceIcon $destPath

    # ...by substituting each hicolor colour(s) for the current theme colour.
    for ((k = 0; k < ${#hicolorColours[@]}; k++)); do
      sed -i s/${hicolorColours[$k]}/${themeColours[$j]}/g $destPath/${hicolorIcons[$i]}
    done
  done
done


# Copy .po files.
rsync -ar --exclude=.svn --include=*.po po build/$NAME-$VERSION
cp po/LINGUAS po/POTFILES.in po/README build/$NAME-$VERSION/po


# Create .mo files.
for PO_FILE in $(find build/$NAME-$VERSION/po -type f -name '*.po') ; do
  msgfmt $PO_FILE --output-file ${PO_FILE%\.po}.mo
done


# Create orig.tar.gz
cd build
tar -czf "${NAME}_${VERSION}.orig.tar.gz" $NAME-$VERSION
cd ..


# Debian files.
rsync -ar --exclude=.svn packaging/debian build/$NAME-$VERSION


# Update debian/install with icons.
for ((i = 0; i < ${#hicolorIcons[@]}; i++)); do
  for ((j = 0; j < ${#themeNames[@]}; j++)); do
    line="icons/${themeNames[$j]}/${hicolorIcons[$i]} usr/share/icons/${themeNames[$j]}/scalable/apps"
    echo $line >> build/$NAME-$VERSION/debian/install
  done
done


# Update debian/install file with .mo
cd build/$NAME-$VERSION
for MO_FILE in $(find po -type f -name '*.mo') ; do
  MO_PATH=${MO_FILE#po}
  MO_CODE=${MO_PATH%$NAME.mo}
  echo "$MO_FILE /usr/share/locale${MO_CODE}LC_MESSAGES" >> debian/install
done
cd ../..


# Build DEB source.
cd build/$NAME-$VERSION
#debuild -S -sa         # Builds a DEB source file.
debuild -sa -us -uc   # Builds a DEB binary file.
cd ..


# Clean up.
#rm -rf $NAME-$VERSION
echo -e "\nTo upload to LaunchPad, change to the 'build' directory and run:\n"
echo -e "    dput ppa:thebernmeister/ppa ${NAME}_${VERSION}-1_source.changes\n"