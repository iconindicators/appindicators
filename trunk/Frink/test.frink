// To run, open a terminal:
//	java -classpath frink.jar frink.parser.Frink -f test.frink
// Both 
//	sun.frink (http://futureboy.us/frinksamp/sun.frink) 
//	frink.jar (http://futureboy.us/frinkjar/frink.jar)
// must be present.
//
// Reference: http://futureboy.us/frinkdocs/

use sun.frink


//calculatemoonPositionAngleRelativeToZenithUsingEval[]
calculatemoonPositionAngleRelativeToZenithUsingLatLong[]


// Reproduce what happens in http://futureboy.us/fsp/highlight.fsp?f=moon.fsp
// Results in an exception
//		SingleArgNumericFunction: Bad argument: -0.7696308093500552147 + -0.017453292519943295767 1 151.20699 in calculatemoonPositionAngleRelativeToZenithUsingEval[]
// I understand that the latNum/longNum are 3 values when printed (and hence this exception)...
// ..but I don't understand why this doesn't happen in the webpage!
calculatemoonPositionAngleRelativeToZenithUsingEval[] :=
{
	latitude = "33.867487"
	latHemi = "-1"
	latNum = eval[ "latitude * latHemi" ] degree
	println[ "latNum " + latNum ]

	longitude = "151.20699"
	longHemi = "1"
	longNum = eval[ "longitude * longHemi" ] degree
	println[ "longNum " + longNum ]

	limb = moonPositionAngleRelativeToZenith[ now[], latNum, longNum ] mod circle
	clockwiseLimb = 360 degrees - limb

	println[ "limb " + limb ]
	println[ "clockwiseLimb " + clockwiseLimb ]
}


// Given the exception when calling calculatemoonPositionAngleRelativeToZenithUsingEval[]
// simplify as much as possible...
// Calculated here, limb degrees = 314 compared with limb degrees = 349 on moon.fsp - why? 
calculatemoonPositionAngleRelativeToZenithUsingLatLong[] :=
{
	latitude = -33.867487 degrees
	println[ "latitude " + latitude ]

	longitude = 151.20699 degrees
	println[ "longitude " + longitude ]

	limb = moonPositionAngleRelativeToZenith[ now[], latitude, longitude ] mod circle
	println[ "limb " + limb ]
	println[ "limb (degrees) " + ( limb -> degrees ) ]

	clockwiseLimb = 360 degrees - limb
	println[ "clockwiseLimb " + clockwiseLimb ]
	println[ "clockwiseLimb (degrees) " + ( clockwiseLimb -> degrees ) ]
}


stuff[] :=
{
	// Sydney, Australia
	latitude = -33.867487
	longitude = 151.20699
	
	// Need to setDefaultTimezone[ "UTC" ]?
	currentDateTime = now[]
	
	[ alpha0, delta0 ] = sunApparentRADecl[ currentDateTime ]
	println[ "sunRA " + alpha0 ] degree
	println[ "sunDec " + delta0 ]
	
	[alpha, delta] = moonApparentRADecl[ currentDateTime ]
	println[ "moonRA " + alpha ]
	println[ "moonDec " + delta ]
	
	moonPositionAngle = arctan[ cos[ delta0 ] sin[ alpha0 - alpha ], sin[ delta0 ] cos[ delta ] - cos[ delta0 ] sin[ delta ] cos[ alpha0 - alpha ] ]
	println[ "moonPositionAngle " + moonPositionAngle ]
	
	hourAngle = hourAngle[ currentDateTime, longitude, alpha ]
	println[ "hourAngle " + hourAngle ]
	
	parallacticAngle = arctan[ sin[ hourAngle ], tan[ latitude ] cos[ delta ] - sin[ delta ] cos[ hourAngle ] ]
	println[ "parallacticAngle " + parallacticAngle ]
	
	moonPositionAngleRelativeToZenith = moonPositionAngle - parallacticAngle
	println[ "moonPositionAngleRelativeToZenith " + moonPositionAngleRelativeToZenith ]
	
	mparz = moonPositionAngleRelativeToZenith[ currentDateTime, latitude, longitude ]
	println[ "moonPositionAngleRelativeToZenith " + mparz ]
	
	mparz = mparz -> degrees
	println[ "moonPositionAngleRelativeToZenith " + mparz ]
}
