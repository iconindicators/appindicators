#TODO
- Do high level renaming according to standards.
  Naming of project, naming of modules (files), naming of classes.
  Then naming of globals, naming of functions, naming of variables.
  - https://peps.python.org/pep-0008/
  - https://docs.python-guide.org/writing/style/
  - https://guicommits.com/organize-python-code-like-a-pro/


#TODO External hosting of source code
#   https://github.com
#   What about SourceForge?  Still uses SVN which is a good thing.


#TODO Eventually need to update 
#	https://launchpad.net/~thebernmeister/+archive/ubuntu/ppa
#	https://askubuntu.com/questions/30334/what-application-indicators-are-available
# explaing to go to PyPI.


#TODO SVG colours 
# https://johndecember.com/html/spec/colorsvghex.html


#TODO Not sure if needed in pyproject.toml 'Depends':
# 	pycairo
# (and not even sure where I saw this)


#TODO Current thinking is to create a .whl, with or without icons/mo and incorporate the .whl into a .deb.
# 
# The same would apply to creating a .rpm.
# 
# Given Indicator Lunar will have to switch to a venv so that the Python libraries ephem/sgp4
# can be installed via pip, what if each indicator is installed via pip, exclusively or in part?
# 
# 
# Option 1
# --------
# As described above; create a .whl, partially or complete,
# and bundle that .whl within a .deb/.rpm which contains
# the source, icons, .mo and .desktop, then installs
# OS level packages. 
# 
# 
# Option 2
# --------
# Create a complete .whl and upload to PyPI.
# Create a .deb/.rpm which does not contain the software, icons, .mo,
# and only installs OS level packages, copies .desktop,
# creates a venv and installs the software (and icons/.mo) via PyPI. 
# 
#
# Option 3
# --------
# Create a complete .whl and upload to PyPI, including .desktop.
# Create an install command along the lines of:
#   sudo apt install "OS level package" &&
#   python3 -m venv $HOME/.venv_indicator_fortune &&
#   $HOME/.venv_indicator_fortune/python3 install indicator_fortune &&
#   cp $HOME/.venv_indicator_fortune/.../indicator_fortune/.../indicator-fortune.py.desktop $HOME/.local/share/applications &&
#   cp $HOME/.venv_indicator_fortune/.../indicator_fortune/.../indicator-fortune.py.desktop $HOME/.config/autostart &&
# which could be put into a shell script for installation.
#
# The command to run is something like:
#   $HOME/.venv_indicator_fortune/python3 $HOME/.venv_indicator_fortune/.../indicator_fortune/indicator-fortune.py


#TODO Good background on Python build/env
#   https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/
#   https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html
#   https://sinoroc.gitlab.io/kb/python/package_data.html


#TODO Single version number location
#   https://packaging.python.org/en/latest/guides/single-sourcing-package-version/
#   https://stackoverflow.com/questions/72357031/set-version-of-module-from-a-file-when-configuring-setuptools-using-setup
#   https://stackoverflow.com/questions/60430112/single-sourcing-package-version-for-setup-cfg-python-projects
#   https://stackoverflow.com/questions/74608905/single-source-of-truth-for-python-project-version-in-presence-of-pyproject-toml


#TODO Shared project layout
#   https://stackoverflow.com/questions/18087122/python-sharing-common-code-among-a-family-of-scripts
#   https://stackoverflow.com/questions/73580708/how-to-share-code-between-python-internals-projects
#   https://stackoverflow.com/questions/48954870/how-to-share-code-between-python-projects
#   https://discuss.python.org/t/multiple-related-programs-one-pyproject-toml-or-multiple-projects/17427/2
